Public Class S86YEarnestProj6
    'In the global scope, all variables are declared,S86life is from the estimated life of item, S86time is for the year of purchase,S86Bal is for the balance,
    'S86Depre is the depreciation amount and S86AccumDepre is the total depreciation amount,S86Dblrate is the 2/n rate for the double declining balance method
    'S86Type is the index varible for which method to apply
    'S86DP is the single depreciation method
    Dim S86Item As String
    Dim S86life, S86time As Integer
    Dim S86Bal, S86Depre As Double
    Dim S86DblRate As Double
    Dim S86Type As Integer
    Private Sub S86btnSL_Click(sender As Object, e As EventArgs) Handles S86btnSL.Click
        If ErrorCheck() Then
            S86input(S86life, S86time, S86Bal)
            S86lBox.Items.Add("Method: straight-line")
            S86Type = 0
            S86DP(S86Type)
        End If
    End Sub
    'The Error handling to check if input is the right kind to proceed
    Function ErrorCheck() As Boolean
        S86lBox.Items.Clear()
        If S86txtItem.Text = Nothing Then
            S86lBox.Items.Add("The Item could not be empty!")
            Return False
        ElseIf S86txtCost.Text = Nothing Then
            S86lBox.Items.Add("The Cost must be not empty! ")
            Return False
        ElseIf Not IsNumeric(S86txtCost.Text) Then
            S86lBox.Items.Add("The Cost must be a positive number! ")
            Return False
        ElseIf CDbl(S86txtCost.Text) < 0 Then
            S86lBox.Items.Add("The Cost must be a positive number! ")
            Return False
        ElseIf S86txtPurchase.Text = Nothing Then
            S86lBox.Items.Add("The year of Purchase must be not empty!")
            Return False
        ElseIf Not IsNumeric(S86txtPurchase.Text) Then
            S86lBox.Items.Add("The year of Purchase must be a positive integer!")
            Return False
        ElseIf CInt(S86txtPurchase.Text) <> CDbl(S86txtPurchase.Text) Or CInt(S86txtPurchase.Text) < 0 Then
            S86lBox.Items.Add("The year of Purchase must be a positive integer!")
            Return False
        ElseIf S86txtlife.Text = Nothing Then
            S86lBox.Items.Add("The estimated life of the item must be not empty!")
            Return False
        ElseIf Not IsNumeric(S86txtlife.Text) Then
            S86lBox.Items.Add("The life time must be a positive integer!")
            Return False
        ElseIf CInt(S86txtlife.Text) <> CDbl(S86txtlife.Text) Or CInt(S86txtlife.Text) < 0 Then
            S86lBox.Items.Add("The life time must be a positive integer!")
            Return False
        End If
        Return True
    End Function
    'input sub procedure is to input all needed data
    Sub S86input(ByRef S86life As Integer, ByRef S86time As Integer, ByRef S86Bal As Double)
        S86lBox.Items.Clear()
        S86lBox.Items.Add("Description: " & S86txtItem.Text)
        S86lBox.Items.Add("Years of Purchase: " & S86txtPurchase.Text)
        S86lBox.Items.Add("Cost: " & S86txtCost.Text)
        S86lBox.Items.Add("Estimated life: " & S86txtlife.Text)
        S86life = CInt(S86txtlife.Text)
        S86Bal = CDbl(S86txtCost.Text)
        S86time = CInt(S86txtPurchase.Text)
    End Sub
    Private Sub S86btnDDB_Click(sender As Object, e As EventArgs) Handles S86btnDDB.Click
        If ErrorCheck() Then
            S86input(S86life, S86time, S86Bal)
            S86lBox.Items.Add("Method: double-declining-balance")
            S86Type = 1
            S86DP(S86Type)
        End If
    End Sub
    'Depreciation routine is to proceed a depreciation approach as required to calculate the needed result,base on the index value generated by clicking the button
    Sub S86DP(ByRef S86Type As Integer)
        Dim S86AccumDepre As Double
        Do Until (S86Bal = 0)
            S86lBox.Items.Add(" ")
            'Here, if S86Type is a 0,then we proceed in a straight line method
            If S86Type = 0 Then
                S86Depre = S86Bal / S86life
            Else
                S86DblRate = 2.0 / S86life
                S86Depre = S86Bal * S86DblRate
            End If
            'If the item balance is smaller than the amount calculated in a depreciation method,we just record the item balance at last
            If S86Bal < S86Depre Then
                S86Depre = S86Bal
                S86AccumDepre += S86Depre
                S86lBox.Items.Add("Value at the beginning of  " & S86time.ToString("D") & ":  " & S86Bal.ToString("C2"))
                S86lBox.Items.Add("Amount of depreciation during  " & S86time.ToString("D") & ":  " & S86Depre.ToString("C2"))
                S86lBox.Items.Add("Total depreciation at end of  " & S86time.ToString("D") & ":  " & S86AccumDepre.ToString("C2"))
            Else
                S86AccumDepre += S86Depre
                S86lBox.Items.Add("Value at the beginning of  " & S86time.ToString("D") & ":  " & S86Bal.ToString("C2"))
                S86lBox.Items.Add("Amount of depreciation during  " & S86time.ToString("D") & ":  " & S86Depre.ToString("C2"))
                S86lBox.Items.Add("Total depreciation at end of  " & S86time.ToString("D") & ":  " & S86AccumDepre.ToString("C2"))
            End If
            S86time += 1
            S86Bal = S86Bal - S86Depre
        Loop
    End Sub
End Class
